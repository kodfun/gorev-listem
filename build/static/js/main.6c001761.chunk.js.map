{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["Gorev","gorev","indeks","gorevTamamla","gorevSil","className","style","textDecoration","yapildi","metin","onClick","YeniGorevForm","gorevEkle","useState","metniGuncelle","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","App","gorevler","gorevleriGuncelle","gorevTamamlaHandler","yeniGorevler","gorevSilHandler","splice","map","deger","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAAe,I,YCKf,SAASA,EAAT,GAA2D,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,SAC5C,OACE,sBAAKC,UAAU,OAAOC,MAAO,CAAEC,eAAgBN,EAAMO,QAAU,eAAiB,IAAhF,UACIP,EAAMQ,MACR,gCACE,wBAAQC,QAAS,kBAAMP,EAAaD,IAApC,qBACA,wBAAQQ,QAAS,kBAAMN,EAASF,IAAhC,qBAOR,SAASS,EAAT,GAAuC,IAAdC,EAAa,EAAbA,UAAa,EACLC,mBAAS,IADJ,mBAC7BJ,EAD6B,KACtBK,EADsB,KAUpC,OACE,sBAAMC,SARW,SAAAC,GACjBA,EAAEC,iBACER,IACJG,EAAUH,GACVK,EAAc,MAId,SACE,uBACEI,KAAK,OACLC,YAAY,kBACZd,UAAU,QACVe,MAAOX,EACPY,SAAU,SAAAL,GAAC,OAAIF,EAAcE,EAAEM,OAAOF,YAkD/BG,MA3Cf,WAAgB,IAAD,EACyBV,mBAAS,CAC7C,CAAEJ,MAAO,uBAAgBD,SAAS,GAClC,CAAEC,MAAO,uCAAoBD,SAAS,GACtC,CAAEC,MAAO,YAAaD,SAAS,KAJpB,mBACNgB,EADM,KACIC,EADJ,KAYPC,EAAsB,SAAAxB,GAC1B,IAAMyB,EAAY,YAAOH,GACzBG,EAAazB,GAAQM,SAAU,EAC/BiB,EAAkBE,IAGdC,EAAkB,SAAA1B,GACtB,IAAMyB,EAAY,YAAOH,GACzBG,EAAaE,OAAO3B,EAAQ,GAC5BuB,EAAkBE,IAGpB,OACE,qBAAKtB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UAEImB,EAASM,KAAI,SAAC7B,EAAOC,GAAR,OACX,cAACF,EAAD,CAEEE,OAAQA,EACRD,MAAOA,EACPE,aAAcuB,EACdtB,SAAUwB,GAJL1B,MAOX,cAACS,EAAD,CAAeC,UA9BI,SAAAmB,GACvB,IAAMJ,EAAY,sBAAOH,GAAP,CAAiB,CAAEf,MAAOsB,KAC5CN,EAAkBE,YCvCPK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6c001761.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css'\n\n// React Bileşeni (Component)\nfunction Gorev({ gorev, indeks, gorevTamamla, gorevSil }) {\n  return (\n    <div className=\"todo\" style={{ textDecoration: gorev.yapildi ? \"line-through\" : \"\" }}>\n      { gorev.metin }\n      <div>\n        <button onClick={() => gorevTamamla(indeks)}>Tamamla</button>\n        <button onClick={() => gorevSil(indeks)}>X</button>\n      </div>\n    </div>\n  );\n}\n\n// React Bileşeni (Component)\nfunction YeniGorevForm({ gorevEkle }) {\n  const [metin, metniGuncelle] = useState(\"\");\n\n  const formTeslim = e => {\n    e.preventDefault();\n    if(!metin)return;\n    gorevEkle(metin);\n    metniGuncelle(\"\");\n  };\n\n  return (\n    <form onSubmit={formTeslim}>\n      <input \n        type=\"text\" \n        placeholder=\"Yeni görev..\"\n        className=\"input\"\n        value={metin} \n        onChange={e => metniGuncelle(e.target.value)}\n      />\n    </form>\n  );\n}\n\n// React Bileşeni (Component)\nfunction App() {\n  const [gorevler, gorevleriGuncelle] = useState([\n    { metin: \"React Öğren!\", yapildi: false },\n    { metin: \"Bulaşıkları yıka\", yapildi: false },\n    { metin: \"Kitap oku\", yapildi: false }\n  ]);\n\n  const gorevEkleHandler = deger => {\n    const yeniGorevler = [...gorevler, { metin: deger } ];\n    gorevleriGuncelle(yeniGorevler);\n  }\n\n  const gorevTamamlaHandler = indeks => {\n    const yeniGorevler = [...gorevler];\n    yeniGorevler[indeks].yapildi = true;\n    gorevleriGuncelle(yeniGorevler);\n  };\n\n  const gorevSilHandler = indeks => {\n    const yeniGorevler = [...gorevler];\n    yeniGorevler.splice(indeks, 1);\n    gorevleriGuncelle(yeniGorevler);\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n        {\n          gorevler.map((gorev, indeks) => (\n            <Gorev \n              key={indeks} \n              indeks={indeks} \n              gorev={gorev} \n              gorevTamamla={gorevTamamlaHandler}\n              gorevSil={gorevSilHandler} />\n          ))\n        }\n        <YeniGorevForm gorevEkle={gorevEkleHandler} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}